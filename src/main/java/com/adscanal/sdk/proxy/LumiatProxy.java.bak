package com.adscanal.sdk.proxy;

import com.adscanal.sdk.common.AppConstant;
import com.adscanal.sdk.dto.LiveOffer;
import com.google.common.collect.Maps;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.DateUtils;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

class Client {
    public static final String username = "lum-customer-hl_97bee780-zone-static_res";
    public static final String password = "gwh05xf366u6";
    public static final int port = 22225;
    public static final String user_agent = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36";
    public static final int max_failures = 3;
    public static final int req_timeout = 60 * 1000;
    public String session_id;
    public HttpHost super_proxy;
    public CloseableHttpClient client;
    public String country;
    public int fail_count;
    public int n_req_for_exit_node;
    public Random rng;
    public String host;



    public Client(String country) {
        this.country = country;
        int proxy_session_id = new Random().nextInt(Integer.MAX_VALUE);
        try {
            InetAddress address = InetAddress.getByName("session-" + proxy_session_id + ".zproxy.lum-superproxy.io");
            this.host = address.getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        rng = new Random();
        switch_session_id();
    }

    public void switch_session_id() {
        session_id = Integer.toString(rng.nextInt(Integer.MAX_VALUE));
        n_req_for_exit_node = 0;
        super_proxy = new HttpHost(host, port);
        update_client();
    }

    public void update_client() {
        close();
        String login = username + (country != null ? "-country-" + country : "")
                + "-session-" + session_id;
        CredentialsProvider cred_provider = new BasicCredentialsProvider();
        cred_provider.setCredentials(new AuthScope(super_proxy),
                new UsernamePasswordCredentials(login, password));
        RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(req_timeout)
                .setConnectionRequestTimeout(req_timeout)
                .build();
        PoolingHttpClientConnectionManager conn_mgr =
                new PoolingHttpClientConnectionManager();
        conn_mgr.setDefaultMaxPerRoute(Integer.MAX_VALUE);
        conn_mgr.setMaxTotal(Integer.MAX_VALUE);
        client = HttpClients.custom()
                .setConnectionManager(conn_mgr)
                .setProxy(super_proxy)
                .setDefaultCredentialsProvider(cred_provider)
                .setDefaultRequestConfig(config)
                .build();
    }

    public CloseableHttpResponse request(String user_agent ,String url) throws IOException {
        try {
            HttpGet request = new HttpGet(url);
            request.setHeader("User-Agent", user_agent);
            RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(500000).setConnectionRequestTimeout(100000).setSocketTimeout(500000).build();
            request.setConfig(requestConfig);

            CloseableHttpResponse response = client.execute(request);
            handle_response(response);
            return response;
        } catch (IOException e) {
            handle_response(null);
            throw e;
        }
    }

    public void handle_response(HttpResponse response) {
        if (response != null && !status_code_requires_exit_node_switch(
                response.getStatusLine().getStatusCode())) {
            // success or other client/website error like 404...
            n_req_for_exit_node++;
            fail_count = 0;
            return;
        }
        switch_session_id();
        fail_count++;
    }

    public boolean status_code_requires_exit_node_switch(int code) {
        return code == 403 || code == 429 || code == 502 || code == 503;
    }

    public boolean have_good_super_proxy() {
        return super_proxy != null && fail_count < max_failures;
    }

    public void close() {
        if (client != null)
            try {
                client.close();
            } catch (IOException e) {
            }
        client = null;
    }
}

public class LumiatProxy implements Runnable {
    public static final int n_total_req = 10;
    public static final int switch_ip_every_n_req = 40;
    public static AtomicInteger at_req = new AtomicInteger(0);
    public String country;


    public List<LiveOffer> offers = null;

    public List<LiveOffer> getOffers() {
        return offers;
    }

    public void setOffers(List<LiveOffer> offers) {
        this.offers = offers;
    }


    public LumiatProxy(String country, List<LiveOffer> offers) {
        this.country = country;
        this.offers = offers;
    }

    public LiveOffer randomOffer(List<LiveOffer> offers) {

        int le = offers.size();
        int i = new Random().nextInt(le);
        return offers.get(i);
    }

    public String randomUA(LiveOffer offer) {

        List<String> uas = AppConstant.GEO_UA.get("IND1");
        int le = uas.size();
        int i = new Random().nextInt(le);
        return uas.get(i);
    }



    Client client = null;

    @Override
    public void run() {

        try {
            client = new Client(country);
            Files.lines(Paths.get("/Volumes/FrankSSD/distdevid/inios.log")).forEach(idfa->{
                if (!client.have_good_super_proxy())
                    client.switch_session_id();
                if (client.n_req_for_exit_node == switch_ip_every_n_req)
                    client.switch_session_id();
                CloseableHttpResponse response = null;
                try {

                    LiveOffer offer = randomOffer(offers);
                    int hour = new Date().getHours();
                    String track = offer.getTrackUrl();
                    if(track ==null){
                        return;
                    }
                    if (track.indexOf("{pub_subid}") > -1) {
                        track = StringUtils.replaceAll(track, "\\{pub_subid}", "AC"+hour);
                    }
                    if (track.indexOf("{click_id}") > -1) {
                        track = StringUtils.replaceAll(track, "\\{click_id}", UUID.randomUUID().toString().substring(0, 8));
                    }
                    if (track.indexOf("{device_id}") > -1) {
                        track = StringUtils.replaceAll(track, "\\{device_id}", idfa);
                    }
                    if (track.indexOf("{idfa}") > -1) {
                        track = StringUtils.replaceAll(track, "\\{idfa}", idfa);
                    }

                    System.out.println(track);
                    response = client.request(randomUA(offer),track);
                    int code = response.getStatusLine().getStatusCode();
                    System.out.println(code != 200 ? code :
                            EntityUtils.toString(response.getEntity()));
                } catch (IOException e) {
                    System.out.println(e.getMessage());
                } finally {
                    System.out.println(at_req.incrementAndGet());
                    try {
                        if (response != null)
                            response.close();
                    } catch (Exception e) {
                    }
                }
            });

            client.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            if (client != null)
                client.close();
        }
    }
}
